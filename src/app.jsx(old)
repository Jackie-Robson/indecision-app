class IndecisionApp extends React.Component{
    constructor(props) {
        super(props)

        this.handleDeleteOptions = this.handleDeleteOptions.bind(this)
        this.handlePick = this.handlePick.bind(this)
        this.handleAddOption = this.handleAddOption.bind(this)
        this.handleDeleteOption = this.handleDeleteOption.bind(this)
        this.state = {
            content: {
                subTitle: 'Put your life in the hands of a computer'
                }
            ,
            options: []
        }
    }

    componentDidMount(){
        console.log('fetching data')
        try {
            const json = localStorage.getItem('options')
            const options = JSON.parse(json)
            if(options){
                this.setState(() => ({options}))
            }
        } catch(e) {

        }
       
    }

    componentDidUpdate(prevProps, prevState){
        if(prevState.options.length !== this.state.options.length){
            const json = JSON.stringify(this.state.options)
            localStorage.setItem('options', json)
            console.log('saving data')
        }
    }

    componentWillUnmount(){
        console.log('unmount')
    }

    handleAddOption(option){

        if(!option){
            return 'enter valid value to add item.'
        }else if(this.state.options.indexOf(option)> -1){
            return 'this option already exists'
        }
        this.setState((prevState)=>({options : prevState.options.concat(option)}))
    }

    handleDeleteOptions(){
        this.setState(() => ({options:[]}))
    }

    handleDeleteOption(optionToRemove){
        this.setState((prevState)=> ({
            options: prevState.options.filter((option) => optionToRemove !== option)
        }))
    }

    handlePick(){
        const randomNum = Math.floor(Math.random() * this.state.options.length);
        const option = this.state.options[randomNum];
        alert(option);
    }

    render(){
        return(
            <div>
                <Header subTitle={this.state.content.subTitle} />
                <Action 
                    hasOptions={this.state.options.length > 0}
                    handlePick={this.handlePick}
                />
                <Options 
                    options={this.state.options} 
                    handleDeleteOptions={this.handleDeleteOptions}
                    handleDeleteOption = {this.handleDeleteOption}/>
                <AddOption handleAddOption={this.handleAddOption}/>
            </div>
        )
    }
}

//  component

const Header = (props) => {    
    return (
        <div>
            <h1>{props.title}</h1>
            {props.subTitle && <h2>{props.subTitle}</h2> }
        </div>
    )
} 

Header.defaultProps = {
    title: 'Indecision'
}

// component
const Action = (props) => {
    return (
            <div>
                <button 
                onClick={props.handlePick}
                disabled={!props.hasOptions}>
                    What should I do?</button>
            </div>
        )
}

const Option = (props) => {
    return (
        <li key={props.ind}>
                {props.data} 
            <button 
                onClick={(e)=>{
                    props.handleDeleteOption(props.data)
                }}
            >   
                Remove
            </button>
        </li>
    )   
}

//component 

const Options = (props) =>{
    return (
        <div>
            <button onClick={props.handleDeleteOptions}>Remove All</button>
            {props.options.length === 0 && <p>Add some things to do!</p>}
            <ul>
                {
                    props.options.map((data, ind) => (
                    <Option 
                    data={data}
                     key={ind}
                     handleDeleteOption={props.handleDeleteOption}/>)
                    )}
            </ul>
            
        </div>
    )
}  


//component
class AddOption extends React.Component{

    constructor(){
        super()

        this.handleAddOption = this.handleAddOption.bind(this)
        this.state = {
            error : undefined
        }
    }

    handleAddOption(e){
        e.preventDefault();

        const option = e.target.elements.option.value.trim()
        const error = this.props.handleAddOption(option);
        this.setState(() => ({error}));
        if(!error){
            e.target.elements.option.value = ''
    }
    }

    render(){
        return (
            <div>
                {this.state.error && <p>{this.state.error}</p> }
            <form onSubmit={this.handleAddOption}>
                <input type="text" name="option"/>
                <button>add option</button>
            </form>
                
            </div>
        )
    }
}


ReactDOM.render(<IndecisionApp options={[]}/> ,document.getElementById('app'))